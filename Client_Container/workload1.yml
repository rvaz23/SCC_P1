config:
  target: 'http://20.73.129.14/scc2122-1.0/rest'
#  target: 'http://localhost:8080/scc2122-backend/rest'
  http:
    timeout: 10
  plugins:
    metrics-by-endpoint: {}
  processor: "./test-utils.js"
  variables:
     metricsProcessEndpoint : "myProcessEndpoint"  # function used to aggregate endpoints for statistics
  phases:
  - name: "Warm up"
    arrivalRate: 1         
    duration: 10
  - name: "Test"
    arrivalRate: 30         
    duration: 10

scenarios:
  
  - name: 'Create users'
    weight: 1
    flow:
      - loop:                            # let's create 100 users - loop ... count
        - post:                          # First: post image for the user
            url: "/media"
            headers:
              Content-Type: application/octet-stream
              Accept: application/json
            beforeRequest: "uploadImageBody"
            capture: 
              regexp: "(.+)"
              as: "imageId"              # capture the reply as image id to be used in user creation
        - function: "genNewUser"         # Generate the needed information for the user
        - post:
            url: "/user"
            headers:
              Content-Type: application/json
              Accept: application/json
            json:
              id: "{{ id }}"
              name: "{{ name }}"
              pwd: "{{ pwd }}"
              photoId: "{{ imageId }}"
              channelIds: []
            afterResponse: "genNewUserReply"    # capture result and store in file
        count: 30
        
        
  - name: 'Create channels'
    weight: 1
    flow:
      - loop:                            # let's create 10 public channels - loop ... count
        - function: "selectUserSkewed"
        - post:                          # First: login as a user
            url: "/user/auth"
            headers:
              Content-Type: application/json
            json:
              user: "{{ user }}"
              pwd: "{{ pwd }}"
        - function: "genNewChannel"
        - post:                          # Create channel
            url: "/channel"
            headers:
              Content-Type: application/json
              Accept: application/json
            json:
              name: "{{ channelName }}"
              owner: "{{ user }}"
              publicChannel: true
              members: []
            capture:                     # Capturing channel id
              - json: $.id
                as: "channelId"
        - loop:                          # Let's add 20 users to the channel
          - function: "selectUserSkewed"
          - function: "adddToSubscribed"
          - post:                         
              url: "/user/auth"
              headers:
                Content-Type: application/json
              json:
                user: "{{ user }}"
                pwd: "{{ pwd }}"
          - post:                          # Subscribe     
              url: "/user/{{ user }}/subscribe/{{ channelId }}"
          count: 10
        count: 10   
      - loop:                            # let's create 45 private channels - loop ... count
        - function: "selectUserSkewed"
        - function: "adddToOwners"
        - post:                          # First: login as a user
            url: "/user/auth"
            headers:
              Content-Type: application/json
            json:
              user: "{{ user }}"
              pwd: "{{ pwd }}"
        - function: "genNewChannel"
        - post:                          # Create channel
            url: "/channel"
            headers:
              Content-Type: application/json
              Accept: application/json
            json:
              name: "{{ channelName }}"
              owner: "{{ user }}"
              publicChannel: false
              members: []
            capture:                     # Capturing channel id
              - json: $.id
                as: "channelId"
        - loop:                          # Let's add 10 users to the channel
          - function: "selectUserSkewed"
          - post:                          # Add user to private channel   
              url: "/channel/{{ channelId }}/add/{{ user }}"
          count: 10
        count: 5
        
  - name: 'Create message'
    weight: 1
    flow:
      - loop:                         # Let's create 2000 messages
        - function: "selectUserSkewed"
        - post:                          # First: login as a user
            url: "/user/auth"
            headers:
              Content-Type: application/json
            json:
              user: "{{ user }}"
              pwd: "{{ pwd }}"
            afterResponse: "printStatus"  
        - get:                          # Get user info
            url: "/user/{{ user }}"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "userObj"
        - function: "selectChannelFromUserSkewed"   # Select channel to post message
        - function: "genNewMessage"           # Generate message information
        - post:                          # Post image if ....
            url: "/media"
            headers:
              Content-Type: application/octet-stream
              Accept: application/json
            beforeRequest: "uploadImageBody"
            capture: 
              regexp: "(.+)"
              as: "imageId"              # capture the reply as image id to be used in user creation
            ifTrue: "hasImage"   # post has image and there is a channel
        - post:                          # Post message
            url: "/messages"
            headers:
              Content-Type: application/json
              Accept: application/json
            json:                         # NOTE: it is not necessary to send all fields
              channel: "{{ channelId }}"
              user: "{{ user }}"
              text: "{{ msgText }}"
              imageId: "{{ imageId }}"
            ifTrue: "channelId"
        count: 10            
  
  - name: 'Passive reader'
    weight: 20
    flow:
      - function: "selectUserSkewed"
      - post:                          # First: login as a user
          url: "/user/auth"
          headers:
            Content-Type: application/json
          json:
            user: "{{ user }}"
            pwd: "{{ pwd }}"
      - loop:
        - get:                          # Get user channels
            url: "/user/{{ user }}/channels"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "channelLst"
        - function: "selectChannelFromChannelLstSkewed"   # Select channel to read messages
        - get:                         
            url: "/channel/{{ channelId }}/messages"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "msgList"
            ifTrue: "channelId"
        - get:                         
            url: "/user/{{ user }}"
            headers:
              Accept: application/json   
        - function: "selectImagesIdFromMsgList"   # Select imageIds from MsgList
        - loop:                                   # load images
            - get:
                url: "/media/{{ $loopElement }}"
                headers: 
                  Accept: application/octet-stream
          over: "imageIdLst"
        whileTrue: "random50"

  - name: 'Troll'
    weight: 1
    flow:
      - function: "selectUserSkewed"
      - post:                          # First: login as a user
          url: "/user/auth"
          headers:
            Content-Type: application/json
          json:
            user: "{{ user }}"
            pwd: "{{ pwd }}"
      - loop:
        - get:                          # Get user channels
            url: "/user/{{ user }}/channels"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "channelLst"
        - function: "selectChannelFromChannelLstSkewed"   # Select channel to read messages
        - get:                         
            url: "/channel/{{ channelId }}/messages?st=0&len=2"
            headers:
              Accept: application/json
            capture: 
              json: "$"
              as: "msgList"
            ifTrue: "channelId"
        - loop:                                 # Post a reply to the most recent messages
          - function: "genNewMessage"           # Generate message information
          - post:                          # Post image if ....
              url: "/media"
              headers:
                Content-Type: application/octet-stream
                Accept: application/json
              beforeRequest: "uploadImageBody"
              capture: 
                regexp: "(.+)"
                as: "imageId"              # capture the reply as image id to be used in user creation
              ifTrue: "hasImage"   # post has image and there is a channel
          - post:                          # Post message
              url: "/messages"
              headers:
                Content-Type: application/json
                Accept: application/json
              json:                         # NOTE: it is not necessary to send all fields
                channel: "{{ $loopElement.channel }}"
                replyTo: "{{ $loopElement.id }}"
                user: "{{ user }}"
                text: "{{ msgText }}"
                imageId: "{{ imageId }}"
          over: "msgList"
        whileTrue: "random50"
        
        
