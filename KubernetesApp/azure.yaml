apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-redis
  template:
    metadata:
      labels:
        app: app-redis
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: app-redis
        image: mcr.microsoft.com/oss/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: app-redis
spec:
  ports:
  - port: 6379
  selector:
    app: app-redis
---


#kind: StorageClass
#apiVersion: storage.k8s.io/v1
#metadata:
#  name: storage
#provisioner: kubernetes.io/azure-disk
#reclaimPolicy: Retain
#parameters:
#  storageaccounttype: Premium_LRS
#  kind: Managed
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 4Gi
      
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 4Gi
      

---

apiVersion: v1
data:
  password: cGFzc3dvcmQxMjM= 
  username: YWRtaW51c2Vy 
kind: Secret
metadata:
  creationTimestamp: null
  name: mongo-creds

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mongo
    spec:
      containers:
      - image: mongo
        name: mongo
        args: ["--dbpath","/data/db"]
        livenessProbe:
          exec:
            command:
              - mongo
              - --disableImplicitSessions
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
              - mongo
              - --disableImplicitSessions
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: "volume"
          mountPath: "/data/db"
      volumes:
      - name: "volume"
        persistentVolumeClaim:
          claimName: "mongo-managed-disk"

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
  - port: 27017
  selector:
    app: mongo          
                  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-scc-webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-scc-webapp
  template:
    metadata:
      labels:
        app: azure-scc-webapp
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-scc-webapp
        image: rvaz23/scc_p2:latest
        volumeMounts:
        - mountPath: "/usr/local/tomcat/media"
          name: volume
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
          limits:
            cpu: 250m
            memory: 1024Mi
        ports:
        - containerPort: 8080
        env:
        - name: REDIS_URL
          value: "app-redis"
        - name: MONGO_URL
          value: "mongo"
        - name: MONGO_DATABASE
          value: "scc2122db52656"       
      volumes:
      - name: volume
        persistentVolumeClaim:
          claimName: azure-managed-disk    
          
          
---
apiVersion: v1
kind: Service
metadata:
  name: azure-scc-webapp
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: azure-scc-webapp
    
    
    
